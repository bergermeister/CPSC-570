CPSC-570 Blockchain and Cryptocurrency Project 2
BlockchainAES
This project implements a simple blockchain which allows users to share data encrypted via
AES-256. Users exchange shared secrets via Diffie-Hellman Key Exchange across 2 or more
blocks in the chain. After this process, Users are able to use the shared secret to 
encrypt and decrypt data with trusted parties.

Running a node:
import Node
Node.Run( 'hostname', 5000 )

Node0, Node1, and Node2 can be run to host nodes on LocalHost at ports 5000, 5001, and
5002 respectively.

Each node hosts a web interface which can be interacted with via a web browser or an
application such as Postman.

Supported methods:
(POST) hostname:port/add_transaction
	JSON Body:
	{
		"sender": "ID",
		"receiver": "ID",
		"data": "p=23;g=5;A=4"
	}
(POST) hostname:port/add_dh_transaction
	JSON Body;
	{
		"p" : 23,
		"g": 5, 
		"receiver" : "ceb627d5-7ae0-42e9-a9af-9fe76d0c0298"
	}
(POST) hostname:port/add_encrypted_transaction
{
	"sender" : "17074dd6-09e7-4f6e-a8bd-b3744d397807",
	"receiver" : "ceb627d5-7ae0-42e9-a9af-9fe76d0c0298",
	"data" : "Example data"
}
(GET) hostname:port/mine_block
(GET) hostname:port/get_transactions
(GET) hostname:port/get_decrypted_transactions
(GET) hostname:port/get_chain
(GET) hostname:port/is_valid

In order to test the Diffie-Hellman Key Exchange and Encrypted Data Exchange,
execute the following commands:
(POST)  http://127.0.01:5000/add_dh_transaction
{
	"p" : 23,
	"g": 5, 
	"receiver" : "ceb627d5-7ae0-42e9-a9af-9fe76d0c0298"
}
(GET)  http://127.0.0.1:5000/mine_block
(GET)  http://127.0.0.1:5001/mine_block
(POST) http://127.0.0.1:5000/add_encrypted_transaction
{
	"sender" : "17074dd6-09e7-4f6e-a8bd-b3744d397807",
	"receiver" : "ceb627d5-7ae0-42e9-a9af-9fe76d0c0298",
	"data" : "Example of sensitive information to encrypt"
}
(GET)  http://127.0.0.1:5000/mine_block
(GET)  http://127.0.0.1:5000/get_transactions
(GET)  http://127.0.0.1:5001/get_transactions
(GET)  http://127.0.0.1:5002/get_transactions
(GET)  http://127.0.0.1:5000/get_decrypted_transactions
(GET)  http://127.0.0.1:5001/get_decrypted_transactions
(GET)  http://127.0.0.1:5002/get_decrypted_transactions

Example Postman Collection:
https://www.getpostman.com/collections/6660a595177448092910

=======================================================================
SmartContract
=======================================================================
Python
-----------------------------------------------------------------------
runfile('E:/Projects/CPSC-570/SmartContract/DiffieHellmanAES.py', wdir='E:/Projects/CPSC-570/SmartContract')

dh = DiffieHellmanAES( 23, 5, 4, 3 )

dh.GetA( )
Out[3]: 4

dh.GetB( )
Out[4]: 10

dh.Encrypt( "Hello World!" )
Out[5]: '63ce86ddea18b9cb2c9756aff3994e6d'

dh.Decrypt( '63ce86ddea18b9cb2c9756aff3994e6d' )
Out[6]: b'Hello World!~~~~'

-----------------------------------------------------------------------
Environment
-----------------------------------------------------------------------
 1. Run Ganache - Quickstart Workspace
 2. Open etherwallet-v3.40.0/index.html in chrome
 3. Add custom Network/Node in etherwallet
 	- Use IP Address and Port from Ganache workspace
 4. Compile SmartContract (*.sol) in Solidity
 	- http://remix.ethereum.org/
 5. Copy Bytecode from Solidity
 6. Pase Bytecode into Etherwallet > Contracts > Deploy Contract > Byte Code
 	- Gas Limit will be automatically calculated, otherwise something is wrong in Bytecode
	- Paste Bytecode into Notepad++ first, then copy just the contents of the value for object
		(Everything between "")
 7. Sign Transaction using Private Key from Ganache
 8. Copy Contract Address from Ganache > Transactions > CONTRACT CREATION transaction
 9. Paste into Etherwallet > Contracts > Interact with Contract > Contract Address
10. Copy ABI from Solidity
11. Paste into Etherwallet > Contracts > Interact with Contract > ABI/JSON Interface
12. Click Access
	


